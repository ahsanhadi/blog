Timing is on.
          nation           | o_year |   sum_profit   
---------------------------+--------+----------------
 ALGERIA                   |   1998 | 261583509.4678
(1 row)

Time: 68345.697 ms (01:08.346)
                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                      
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1454007.40..1454007.45 rows=1 width=66) (actual time=81202.930..81229.148 rows=1 loops=1)
   Output: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)), (sum(((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)) - (partsupp.ps_supplycost * lineitem.l_quantity))))
   Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
   ->  Finalize GroupAggregate  (cost=1454007.40..1456563.78 rows=60150 width=66) (actual time=81202.928..81202.928 rows=1 loops=1)
         Output: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)), sum(((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)) - (partsupp.ps_supplycost * lineitem.l_quantity)))
         Group Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone))
         Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
         ->  Sort  (cost=1454007.40..1454308.15 rows=120300 width=66) (actual time=81202.920..81202.920 rows=4 loops=1)
               Output: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)), (PARTIAL sum(((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)) - (partsupp.ps_supplycost * lineitem.l_quantity))))
               Sort Key: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)) DESC
               Sort Method: quicksort  Memory: 98kB
               Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
               ->  Gather  (cost=1430773.70..1443856.32 rows=120300 width=66) (actual time=81202.046..81228.730 rows=525 loops=1)
                     Output: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)), (PARTIAL sum(((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)) - (partsupp.ps_supplycost * lineitem.l_quantity))))
                     Workers Planned: 2
                     Workers Launched: 2
                     Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
                     ->  Partial HashAggregate  (cost=1429773.70..1430826.32 rows=60150 width=66) (actual time=81081.453..81081.832 rows=175 loops=3)
                           Output: nation.n_name, (date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)), PARTIAL sum(((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)) - (partsupp.ps_supplycost * lineitem.l_quantity)))
                           Group Key: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone)
                           Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
                           Worker 0: actual time=81013.004..81013.361 rows=175 loops=1
                             Buffers: shared hit=1229933 read=858552, temp read=58242 written=58180
                           Worker 1: actual time=81030.902..81031.280 rows=175 loops=1
                             Buffers: shared hit=1235790 read=861192, temp read=58280 written=58218
                           ->  Hash Join  (cost=676864.60..1404159.84 rows=1463649 width=57) (actual time=12581.407..80303.725 rows=1087902 loops=3)
                                 Output: nation.n_name, date_part('year'::text, (orders.o_orderdate)::timestamp without time zone), lineitem.l_extendedprice, lineitem.l_discount, partsupp.ps_supplycost, lineitem.l_quantity
                                 Inner Unique: true
                                 Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                 Buffers: shared hit=3736065 read=2605108, temp read=175076 written=174890
                                 Worker 0: actual time=12559.373..80249.696 rows=1073341 loops=1
                                   Buffers: shared hit=1229933 read=858552, temp read=58242 written=58180
                                 Worker 1: actual time=12558.408..80265.325 rows=1078003 loops=1
                                   Buffers: shared hit=1235790 read=861192, temp read=58280 written=58218
                                 ->  Hash Join  (cost=676863.04..1392346.63 rows=1463649 width=35) (actual time=12580.003..80044.738 rows=1087902 loops=3)
                                       Output: lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_quantity, supplier.s_nationkey, partsupp.ps_supplycost, orders.o_orderdate
                                       Inner Unique: true
                                       Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                       Buffers: shared hit=3736031 read=2605105, temp read=175076 written=174890
                                       Worker 0: actual time=12557.368..79995.833 rows=1073341 loops=1
                                         Buffers: shared hit=1229916 read=858551, temp read=58242 written=58180
                                       Worker 1: actual time=12556.263..80011.941 rows=1078003 loops=1
                                         Buffers: shared hit=1235774 read=861190, temp read=58280 written=58218
                                       ->  Nested Loop  (cost=4549.00..634726.51 rows=1463649 width=39) (actual time=77.995..62724.712 rows=1087902 loops=3)
                                             Output: lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_quantity, lineitem.l_orderkey, supplier.s_nationkey, partsupp.ps_supplycost
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             Buffers: shared hit=3183541 read=2328881
                                             Worker 0: actual time=56.471..62711.867 rows=1073341 loops=1
                                               Buffers: shared hit=1047542 read=764679
                                             Worker 1: actual time=56.692..62712.851 rows=1078003 loops=1
                                               Buffers: shared hit=1052157 read=768561
                                             ->  Hash Join  (cost=4548.43..187357.76 rows=202072 width=38) (actual time=76.719..5577.151 rows=145140 loops=3)
                                                   Output: part.p_partkey, partsupp.ps_supplycost, partsupp.ps_suppkey, partsupp.ps_partkey, supplier.s_suppkey, supplier.s_nationkey
                                                   Inner Unique: true
                                                   Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                                   Buffers: shared hit=340011 read=152759
                                                   Worker 0: actual time=55.252..5540.745 rows=143048 loops=1
                                                     Buffers: shared hit=112492 read=49489
                                                   Worker 1: actual time=55.290..5483.318 rows=143812 loops=1
                                                     Buffers: shared hit=113117 read=49609
                                                   ->  Nested Loop  (cost=0.43..182279.30 rows=202072 width=26) (actual time=1.647..5359.324 rows=145140 loops=3)
                                                         Output: part.p_partkey, partsupp.ps_supplycost, partsupp.ps_suppkey, partsupp.ps_partkey
                                                         Buffers: shared hit=335413 read=150463
                                                         Worker 0: actual time=2.677..5346.237 rows=143048 loops=1
                                                           Buffers: shared hit=110194 read=49489
                                                         Worker 1: actual time=2.152..5287.187 rows=143812 loops=1
                                                           Buffers: shared hit=110819 read=49609
                                                         ->  Parallel Seq Scan on public.part  (cost=0.00..51397.46 rows=50504 width=4) (actual time=0.304..380.023 rows=36285 loops=3)
                                                               Output: part.p_partkey, part.p_name, part.p_mfgr, part.p_brand, part.p_type, part.p_size, part.p_container, part.p_retailprice, part.p_comment
                                                               Filter: ((part.p_name)::text ~~ '%black%'::text)
                                                               Rows Removed by Filter: 630382
                                                               Buffers: shared hit=1 read=40980
                                                               Worker 0: actual time=0.825..384.546 rows=35762 loops=1
                                                                 Buffers: shared read=13461
                                                               Worker 1: actual time=0.071..383.766 rows=35953 loops=1
                                                                 Buffers: shared read=13535
                                                         ->  Index Scan using idx_partsupp_partkey on public.partsupp  (cost=0.43..2.40 rows=19 width=22) (actual time=0.127..0.135 rows=4 loops=108855)
                                                               Output: partsupp.ps_partkey, partsupp.ps_suppkey, partsupp.ps_availqty, partsupp.ps_supplycost, partsupp.ps_comment
                                                               Index Cond: (partsupp.ps_partkey = part.p_partkey)
                                                               Buffers: shared hit=335412 read=109483
                                                               Worker 0: actual time=0.128..0.136 rows=4 loops=35762
                                                                 Buffers: shared hit=110194 read=36028
                                                               Worker 1: actual time=0.126..0.134 rows=4 loops=35953
                                                                 Buffers: shared hit=110819 read=36074
                                                   ->  Hash  (cost=3298.00..3298.00 rows=100000 width=12) (actual time=73.605..73.605 rows=100000 loops=3)
                                                         Output: supplier.s_suppkey, supplier.s_nationkey
                                                         Buckets: 131072  Batches: 1  Memory Usage: 5712kB
                                                         Buffers: shared hit=4598 read=2296
                                                         Worker 0: actual time=51.090..51.090 rows=100000 loops=1
                                                           Buffers: shared hit=2298
                                                         Worker 1: actual time=51.556..51.556 rows=100000 loops=1
                                                           Buffers: shared hit=2298
                                                         ->  Seq Scan on public.supplier  (cost=0.00..3298.00 rows=100000 width=12) (actual time=0.048..50.569 rows=100000 loops=3)
                                                               Output: supplier.s_suppkey, supplier.s_nationkey
                                                               Buffers: shared hit=4598 read=2296
                                                               Worker 0: actual time=0.070..31.750 rows=100000 loops=1
                                                                 Buffers: shared hit=2298
                                                               Worker 1: actual time=0.063..31.738 rows=100000 loops=1
                                                                 Buffers: shared hit=2298
                                             ->  Index Scan using idx_lineitem_part_supp on public.lineitem  (cost=0.56..2.20 rows=1 width=41) (actual time=0.090..0.389 rows=7 loops=435420)
                                                   Output: lineitem.l_orderkey, lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_linenumber, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_tax, lineitem.l_returnflag, lineitem.l_linestatus, lineitem.l_shipdate, lineitem.l_commitdate, lineitem.l_receiptdate, lineitem.l_shipinstruct, lineitem.l_shipmode, lineitem.l_comment
                                                   Index Cond: ((lineitem.l_partkey = partsupp.ps_partkey) AND (lineitem.l_suppkey = partsupp.ps_suppkey))
                                                   Buffers: shared hit=2843530 read=2176122
                                                   Worker 0: actual time=0.090..0.395 rows=8 loops=143048
                                                     Buffers: shared hit=935050 read=715190
                                                   Worker 1: actual time=0.090..0.394 rows=7 loops=143812
                                                     Buffers: shared hit=939040 read=718952
                                       ->  Hash  (cost=426221.13..426221.13 rows=14999913 width=8) (actual time=12493.313..12493.313 rows=15000000 loops=3)
                                             Output: orders.o_orderdate, orders.o_orderkey
                                             Buckets: 1048576  Batches: 32  Memory Usage: 26512kB
                                             Buffers: shared hit=552446 read=276220, temp written=148959
                                             Worker 0: actual time=12492.831..12492.831 rows=15000000 loops=1
                                               Buffers: shared hit=182354 read=93868, temp written=49653
                                             Worker 1: actual time=12492.827..12492.827 rows=15000000 loops=1
                                               Buffers: shared hit=183593 read=92629, temp written=49653
                                             ->  Seq Scan on public.orders  (cost=0.00..426221.13 rows=14999913 width=8) (actual time=0.181..10399.099 rows=15000000 loops=3)
                                                   Output: orders.o_orderdate, orders.o_orderkey
                                                   Buffers: shared hit=552446 read=276220
                                                   Worker 0: actual time=0.024..10397.791 rows=15000000 loops=1
                                                     Buffers: shared hit=182354 read=93868
                                                   Worker 1: actual time=0.214..10412.596 rows=15000000 loops=1
                                                     Buffers: shared hit=183593 read=92629
                                 ->  Hash  (cost=1.25..1.25 rows=25 width=30) (actual time=0.046..0.046 rows=25 loops=3)
                                       Output: nation.n_name, nation.n_nationkey
                                       Buckets: 1024  Batches: 1  Memory Usage: 10kB
                                       Buffers: shared hit=3
                                       Worker 0: actual time=0.052..0.052 rows=25 loops=1
                                         Buffers: shared hit=1
                                       Worker 1: actual time=0.050..0.050 rows=25 loops=1
                                         Buffers: shared hit=1
                                       ->  Seq Scan on public.nation  (cost=0.00..1.25 rows=25 width=30) (actual time=0.026..0.032 rows=25 loops=3)
                                             Output: nation.n_name, nation.n_nationkey
                                             Buffers: shared hit=3
                                             Worker 0: actual time=0.032..0.037 rows=25 loops=1
                                               Buffers: shared hit=1
                                             Worker 1: actual time=0.033..0.037 rows=25 loops=1
                                               Buffers: shared hit=1
 Planning time: 33.910 ms
 Execution time: 81229.991 ms
(139 rows)

Time: 81285.763 ms (01:21.286)
          nation           | o_year |   sum_profit   
---------------------------+--------+----------------
 ALGERIA                   |   1998 | 261583509.4678
(1 row)

Time: 73939.195 ms (01:13.939)
